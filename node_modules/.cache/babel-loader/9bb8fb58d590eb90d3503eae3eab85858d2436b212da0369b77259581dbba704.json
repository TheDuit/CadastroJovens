{"ast":null,"code":"export default function handleCpf(event) {\n  var campo = event.target;\n  var valor = campo.value.replace(/\\D/g, ''); // remove tudo que não é número\n  valor = valor.replace(/(\\d{3})(\\d)/, '$1.$2'); // coloca ponto depois dos 3 primeiros números\n  valor = valor.replace(/(\\d{3})(\\d)/, '$1.$2'); // coloca ponto depois dos 6 primeiros números\n  valor = valor.replace(/(\\d{3})(\\d{1,2})$/, '$1-$2'); // coloca hífen antes dos últimos 2 números\n  campo.value = valor; // atualiza o valor do campo com a máscara\n\n  console;\n  if (!validarCPF(valor)) {\n    campo.classList.add('error');\n  } else {\n    campo.classList.remove('error');\n  }\n}\nfunction validarCPF(cpf) {\n  cpf = cpf.replace(/[^\\d]+/g, ''); // remove tudo que não é número\n  if (cpf == '') return false; // se o CPF estiver vazio, é inválido\n\n  // Valida o primeiro dígito verificador do CPF\n  var soma = 0;\n  for (let i = 0; i < 9; i++) {\n    soma += parseInt(cpf.charAt(i)) * (10 - i);\n  }\n  var resto = 11 - soma % 11;\n  if (resto === 10 || resto === 11) {\n    resto = 0;\n  }\n  if (resto != parseInt(cpf.charAt(9))) {\n    return false;\n  }\n\n  // Valida o segundo dígito verificador do CPF\n  soma = 0;\n  for (let i = 0; i < 10; i++) {\n    soma += parseInt(cpf.charAt(i)) * (11 - i);\n  }\n  resto = 11 - soma % 11;\n  if (resto === 10 || resto === 11) {\n    resto = 0;\n  }\n  if (resto != parseInt(cpf.charAt(10))) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["handleCpf","event","campo","target","valor","value","replace","console","validarCPF","classList","add","remove","cpf","soma","i","parseInt","charAt","resto"],"sources":["C:/.ssh/cadastroReact/cadastro/CadastroJovens/src/Utils/handleCPF.js"],"sourcesContent":["export default function handleCpf(event){\r\n    var campo = event.target;\r\n    var valor = campo.value.replace(/\\D/g, ''); // remove tudo que não é número\r\n    valor = valor.replace(/(\\d{3})(\\d)/, '$1.$2'); // coloca ponto depois dos 3 primeiros números\r\n    valor = valor.replace(/(\\d{3})(\\d)/, '$1.$2'); // coloca ponto depois dos 6 primeiros números\r\n    valor = valor.replace(/(\\d{3})(\\d{1,2})$/, '$1-$2'); // coloca hífen antes dos últimos 2 números\r\n    campo.value = valor; // atualiza o valor do campo com a máscara\r\n\r\n    console\r\n\r\n    if(!validarCPF(valor)){\r\n        campo.classList.add('error');\r\n    }\r\n    else{\r\n        campo.classList.remove('error');\r\n    }\r\n\r\n}\r\n\r\nfunction validarCPF(cpf) {\r\n    cpf = cpf.replace(/[^\\d]+/g,''); // remove tudo que não é número\r\n    if (cpf == '') return false; // se o CPF estiver vazio, é inválido\r\n  \r\n    // Valida o primeiro dígito verificador do CPF\r\n    var soma = 0;\r\n    for (let i = 0; i < 9; i++) {\r\n      soma += parseInt(cpf.charAt(i)) * (10 - i);\r\n    }\r\n    var resto = 11 - (soma % 11);\r\n    if (resto === 10 || resto === 11) {\r\n      resto = 0;\r\n    }\r\n    if (resto != parseInt(cpf.charAt(9))) {\r\n      return false;\r\n    }\r\n  \r\n    // Valida o segundo dígito verificador do CPF\r\n    soma = 0;\r\n    for (let i = 0; i < 10; i++) {\r\n      soma += parseInt(cpf.charAt(i)) * (11 - i);\r\n    }\r\n    resto = 11 - (soma % 11);\r\n    if (resto === 10 || resto === 11) {\r\n      resto = 0;\r\n    }\r\n    if (resto != parseInt(cpf.charAt(10))) {\r\n      return false;\r\n    }\r\n  \r\n    return true;\r\n  }"],"mappings":"AAAA,eAAe,SAASA,SAASA,CAACC,KAAK,EAAC;EACpC,IAAIC,KAAK,GAAGD,KAAK,CAACE,MAAM;EACxB,IAAIC,KAAK,GAAGF,KAAK,CAACG,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;EAC5CF,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC;EAC/CF,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC;EAC/CF,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC,CAAC;EACrDJ,KAAK,CAACG,KAAK,GAAGD,KAAK,CAAC,CAAC;;EAErBG,OAAO;EAEP,IAAG,CAACC,UAAU,CAACJ,KAAK,CAAC,EAAC;IAClBF,KAAK,CAACO,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;EAChC,CAAC,MACG;IACAR,KAAK,CAACO,SAAS,CAACE,MAAM,CAAC,OAAO,CAAC;EACnC;AAEJ;AAEA,SAASH,UAAUA,CAACI,GAAG,EAAE;EACrBA,GAAG,GAAGA,GAAG,CAACN,OAAO,CAAC,SAAS,EAAC,EAAE,CAAC,CAAC,CAAC;EACjC,IAAIM,GAAG,IAAI,EAAE,EAAE,OAAO,KAAK,CAAC,CAAC;;EAE7B;EACA,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,IAAI,IAAIE,QAAQ,CAACH,GAAG,CAACI,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EAC5C;EACA,IAAIG,KAAK,GAAG,EAAE,GAAIJ,IAAI,GAAG,EAAG;EAC5B,IAAII,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,EAAE,EAAE;IAChCA,KAAK,GAAG,CAAC;EACX;EACA,IAAIA,KAAK,IAAIF,QAAQ,CAACH,GAAG,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;IACpC,OAAO,KAAK;EACd;;EAEA;EACAH,IAAI,GAAG,CAAC;EACR,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3BD,IAAI,IAAIE,QAAQ,CAACH,GAAG,CAACI,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EAC5C;EACAG,KAAK,GAAG,EAAE,GAAIJ,IAAI,GAAG,EAAG;EACxB,IAAII,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,EAAE,EAAE;IAChCA,KAAK,GAAG,CAAC;EACX;EACA,IAAIA,KAAK,IAAIF,QAAQ,CAACH,GAAG,CAACI,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE;IACrC,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}