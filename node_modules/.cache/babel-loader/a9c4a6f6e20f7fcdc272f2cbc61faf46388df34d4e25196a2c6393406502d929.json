{"ast":null,"code":"export default function handleCpf(ev) {\n  // Remove todos os caracteres não numéricos do valor\n  const cpfLimpo = event.target.value.replace(/\\D+/g, '');\n\n  // Verifica se o CPF possui 11 dígitos\n  if (cpfLimpo.length !== 11) {\n    return {\n      valido: false,\n      cpf: ''\n    };\n  }\n\n  // Separa os dígitos em grupos usando regex e formata o CPF\n  const cpfFormatado = cpfLimpo.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\n\n  // Calcula o primeiro dígito verificador\n  let soma = 0;\n  for (let i = 0; i < 9; i++) {\n    soma += parseInt(cpfLimpo.charAt(i)) * (10 - i);\n  }\n  let primeiroDigito = 11 - soma % 11;\n  if (primeiroDigito > 9) {\n    primeiroDigito = 0;\n  }\n\n  // Calcula o segundo dígito verificador\n  soma = 0;\n  for (let i = 0; i < 10; i++) {\n    soma += parseInt(cpfLimpo.charAt(i)) * (11 - i);\n  }\n  let segundoDigito = 11 - soma % 11;\n  if (segundoDigito > 9) {\n    segundoDigito = 0;\n  }\n\n  // Verifica se os dígitos verificadores são válidos\n  if (parseInt(cpfLimpo.charAt(9)) !== primeiroDigito || parseInt(cpfLimpo.charAt(10)) !== segundoDigito) {\n    return {\n      valido: false,\n      cpf: cpfFormatado\n    };\n  }\n\n  // Se chegou até aqui, o CPF é válido\n  return {\n    valido: true,\n    cpf: cpfFormatado\n  };\n}","map":{"version":3,"names":["handleCpf","ev","cpfLimpo","event","target","value","replace","length","valido","cpf","cpfFormatado","soma","i","parseInt","charAt","primeiroDigito","segundoDigito"],"sources":["C:/.ssh/cadastroReact/cadastro/CadastroJovens/src/Utils/handleCPF.js"],"sourcesContent":["export default function handleCpf(ev) {\r\n    // Remove todos os caracteres não numéricos do valor\r\n    const cpfLimpo = event.target.value.replace(/\\D+/g, '');\r\n  \r\n    // Verifica se o CPF possui 11 dígitos\r\n    if (cpfLimpo.length !== 11) {\r\n      return { valido: false, cpf: '' };\r\n    }\r\n  \r\n    // Separa os dígitos em grupos usando regex e formata o CPF\r\n    const cpfFormatado = cpfLimpo.replace(\r\n      /(\\d{3})(\\d{3})(\\d{3})(\\d{2})/,\r\n      '$1.$2.$3-$4'\r\n    );\r\n  \r\n    // Calcula o primeiro dígito verificador\r\n    let soma = 0;\r\n    for (let i = 0; i < 9; i++) {\r\n      soma += parseInt(cpfLimpo.charAt(i)) * (10 - i);\r\n    }\r\n    let primeiroDigito = 11 - (soma % 11);\r\n    if (primeiroDigito > 9) {\r\n      primeiroDigito = 0;\r\n    }\r\n  \r\n    // Calcula o segundo dígito verificador\r\n    soma = 0;\r\n    for (let i = 0; i < 10; i++) {\r\n      soma += parseInt(cpfLimpo.charAt(i)) * (11 - i);\r\n    }\r\n    let segundoDigito = 11 - (soma % 11);\r\n    if (segundoDigito > 9) {\r\n      segundoDigito = 0;\r\n    }\r\n  \r\n    // Verifica se os dígitos verificadores são válidos\r\n    if (\r\n      parseInt(cpfLimpo.charAt(9)) !== primeiroDigito ||\r\n      parseInt(cpfLimpo.charAt(10)) !== segundoDigito\r\n    ) {\r\n      return { valido: false, cpf: cpfFormatado };\r\n    }\r\n  \r\n    // Se chegou até aqui, o CPF é válido\r\n    return { valido: true, cpf: cpfFormatado };\r\n  }"],"mappings":"AAAA,eAAe,SAASA,SAASA,CAACC,EAAE,EAAE;EAClC;EACA,MAAMC,QAAQ,GAAGC,KAAK,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;;EAEvD;EACA,IAAIJ,QAAQ,CAACK,MAAM,KAAK,EAAE,EAAE;IAC1B,OAAO;MAAEC,MAAM,EAAE,KAAK;MAAEC,GAAG,EAAE;IAAG,CAAC;EACnC;;EAEA;EACA,MAAMC,YAAY,GAAGR,QAAQ,CAACI,OAAO,CACnC,8BAA8B,EAC9B,aAAa,CACd;;EAED;EACA,IAAIK,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,IAAI,IAAIE,QAAQ,CAACX,QAAQ,CAACY,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EACjD;EACA,IAAIG,cAAc,GAAG,EAAE,GAAIJ,IAAI,GAAG,EAAG;EACrC,IAAII,cAAc,GAAG,CAAC,EAAE;IACtBA,cAAc,GAAG,CAAC;EACpB;;EAEA;EACAJ,IAAI,GAAG,CAAC;EACR,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3BD,IAAI,IAAIE,QAAQ,CAACX,QAAQ,CAACY,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EACjD;EACA,IAAII,aAAa,GAAG,EAAE,GAAIL,IAAI,GAAG,EAAG;EACpC,IAAIK,aAAa,GAAG,CAAC,EAAE;IACrBA,aAAa,GAAG,CAAC;EACnB;;EAEA;EACA,IACEH,QAAQ,CAACX,QAAQ,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC,KAAKC,cAAc,IAC/CF,QAAQ,CAACX,QAAQ,CAACY,MAAM,CAAC,EAAE,CAAC,CAAC,KAAKE,aAAa,EAC/C;IACA,OAAO;MAAER,MAAM,EAAE,KAAK;MAAEC,GAAG,EAAEC;IAAa,CAAC;EAC7C;;EAEA;EACA,OAAO;IAAEF,MAAM,EAAE,IAAI;IAAEC,GAAG,EAAEC;EAAa,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}